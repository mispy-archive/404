// Generated by CoffeeScript 1.3.3
(function() {
  var STAR_COLOR, TOTAL_STARS, ready,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  TOTAL_STARS = 5000;

  STAR_COLOR = [255, 255, 255];

  window.StellarClass = (function() {

    function StellarClass() {}

    StellarClass.frequency = {
      O: 0.0000003,
      B: 0.0013,
      A: 0.006,
      F: 0.03,
      G: 0.076,
      K: 0.121,
      M: 0.7645
    };

    StellarClass.luminosity = {
      O: 30000,
      B: 27500,
      A: 15,
      F: 3.25,
      G: 1.05,
      K: 0.34,
      M: 0.08
    };

    StellarClass.color = {
      O: [155, 176, 255],
      B: [170, 191, 255],
      A: [202, 215, 255],
      F: [248, 247, 255],
      G: [255, 244, 234],
      K: [255, 210, 161],
      M: [255, 204, 111]
    };

    StellarClass.random = function() {
      var last, rand, sclass, val, _ref;
      rand = Math.random();
      last = null;
      _ref = StellarClass.frequency;
      for (sclass in _ref) {
        val = _ref[sclass];
        if (rand < val) {
          return sclass;
        }
        last = sclass;
      }
      return last;
    };

    return StellarClass;

  }).call(this);

  window.Star = (function() {

    Star.tinted_images = {};

    function Star(props) {
      var key, val;
      for (key in props) {
        val = props[key];
        this[key] = val;
      }
      this.color = StellarClass.color[this.sclass];
      this.luminosity = StellarClass.luminosity[this.sclass];
      this.luminosity += Math.random() * (StellarClass.luminosity[this.sclass] / 2);
      this.luminosity -= Math.random() * (StellarClass.luminosity[this.sclass] / 2);
      this.img = document.getElementById("star" + this.sclass);
    }

    return Star;

  })();

  window.Map = (function() {

    function Map() {
      this.setup = __bind(this.setup, this);

      this.begin = __bind(this.begin, this);

      this.resize = __bind(this.resize, this);

      this.render = __bind(this.render, this);

      this.loop = __bind(this.loop, this);

    }

    Map.prototype.stars = [];

    Map.prototype.started = false;

    Map.prototype.mouseX = 0;

    Map.prototype.mouseY = 0;

    Map.prototype.twinkle = 1;

    Map.prototype.last_time = 0;

    Map.prototype.loop = function(timestamp) {
      var dt, shift, star, _i, _len, _ref;
      dt = (timestamp - this.last_time) || 16;
      _ref = this.stars;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        star = _ref[_i];
        shift = 0;
        while (star.x + shift > this.ww) {
          shift -= this.ww;
          star.y = Math.random() * this.wh;
        }
        while (star.x + shift < 0) {
          shift += this.ww;
          star.y = Math.random() * this.wh;
        }
        star.x += shift;
      }
      this.twinkle += dt / 650;
      this.render();
      this.last_time = timestamp;
      return requestAnimationFrame(this.loop);
    };

    Map.prototype.render = function() {
      var lumen, star, _i, _len, _ref, _results;
      this.ctx.globalAlpha = 1;
      this.ctx.fillStyle = "rgb(0,0,0)";
      this.ctx.fillRect(0, 0, this.ww, this.wh);
      _ref = this.stars;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        star = _ref[_i];
        if (star.luminosity > 1) {
          lumen = 2 * Math.log(10 * star.luminosity);
        } else {
          lumen = 10 * star.luminosity;
        }
        lumen += star.speed / 2;
        lumen = Math.round(lumen);
        if (lumen > 6) {
          this.ctx.globalAlpha = 1;
        } else {
          this.ctx.globalAlpha = Math.abs(Math.sin(this.twinkle + star.speed));
        }
        _results.push(this.ctx.drawImage(star.img, Math.floor(star.x - lumen / 2), Math.floor(star.y - lumen / 2), lumen, lumen));
      }
      return _results;
    };

    Map.prototype.resize = function() {
      var obj, old_wh, old_ww, _i, _len, _ref;
      old_ww = this.ww;
      old_wh = this.wh;
      this.ww = window.innerWidth;
      this.wh = window.innerHeight;
      _ref = this.stars;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        obj.x = obj.x * (this.ww / old_ww);
        obj.y = obj.y * (this.wh / old_wh);
      }
      this.canvas.setAttribute('width', this.ww);
      this.canvas.setAttribute('height', this.wh);
      return this.render();
    };

    Map.prototype.begin = function() {
      var i, speed, star, _i,
        _this = this;
      if (this.started) {
        return;
      }
      this.canvas = document.getElementById('canvas');
      this.ctx = this.canvas.getContext("2d");
      this.resize();
      for (i = _i = 0; 0 <= TOTAL_STARS ? _i <= TOTAL_STARS : _i >= TOTAL_STARS; i = 0 <= TOTAL_STARS ? ++_i : --_i) {
        if (Math.random() < 0.9) {
          speed = 1 + Math.random() * 6;
        } else {
          speed = Math.random() * 10;
        }
        star = new Star({
          x: Math.random() * this.ww,
          y: Math.random() * this.wh,
          sclass: StellarClass.random(),
          speed: speed
        });
        this.stars.push(star);
      }
      "i = 1\nfor sclass of StellarClass.frequency\n  @stars.push new Star(\n    x: i*100\n    y: i*100\n    speed: 10\n    sclass: sclass\n  )\n  i += 1";

      document.onmousemove = function(e) {
        _this.mouseX = e.pageX - _this.ww / 2;
        return _this.mouseY = e.pageY - _this.wh / 2;
      };
      window.onresize = this.resize;
      this.loop();
      this.started = true;
      return this.mouseX = this.ww / 2;
    };

    Map.prototype.setup = function() {
      return this.begin();
    };

    return Map;

  })();

  ready = function(func) {
    "Hacky $(document).ready() equivalent.";
    if (/in/.test(document.readyState)) {
      return setTimeout(ready, 9, func);
    } else {
      return func();
    }
  };

  ready(function() {
    window.map = new Map;
    return map.setup();
  });

}).call(this);
